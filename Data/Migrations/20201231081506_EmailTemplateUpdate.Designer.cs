// <auto-generated />
using System;
using Data.Base;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201231081506_EmailTemplateUpdate")]
    partial class EmailTemplateUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("Core.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubscribed")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Core.Entities.EmailLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailTemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Form")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailLog");
                });

            modelBuilder.Entity("Core.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemplateType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "<html><head><link href='https://fonts.googleapis.com/css?family=Roboto' rel='stylesheet'><style>body{font-family: 'Roboto';font-size: 1rem;background-color: #fff;}.content{Margin: 0 auto; max-width: 580px; padding: 10px;}.wrapper{width: 100%;border-radius: 3px;padding: 30px;}.wrapper img{height:150px; width:100px; display: block;margin-left: auto;margin-right: auto;width: 50%;}.footer{Margin-top: 10px; text-align: center; width: 100%;color: #999999;font-size:0.8rem;}.visit-dh-health{color: #2F8F9C;text-decoration: none;}</style></head><body> <div class=\"content\"> <div class=\"wrapper\"><b id=\"userName\"></b> <p>This is to inform you that your query has been received. Our team will contact you soon.</p><br><p>Thank you!.</p><p>Dh Health Team</p><p>Visit our Website <a class=\"visit-dh-health\" href=\"https://www.dh.health/ \">Dh.Health<a></p>. </div><div class=\"footer\"> <p>Proshanti 3rd & 4th Floor, House: 257 <br>Road: 1, Block: B, Bashundhara R/A,Dhaka 1229.</p><p>Powered by <a class=\"visit-dh-health\" href=\"https://www.dh.health/ \">Dh.Health<a></p>.</div></div></body></html>",
                            CreatedBy = "SYSTEM",
                            CreatedOn = new DateTime(2020, 12, 31, 8, 15, 5, 838, DateTimeKind.Utc).AddTicks(1281),
                            IsDeleted = false,
                            TemplateName = "User Confirmation",
                            TemplateType = 1
                        },
                        new
                        {
                            Id = 2,
                            Body = "<html><head><link href='https://fonts.googleapis.com/css?family=Roboto' rel='stylesheet'><style>body{font-family: 'Roboto';font-size: 1rem;background-color: #fff;}.content{Margin: 0 auto; max-width: 580px; padding: 10px;}.wrapper{width: 100%; border-radius: 3px;padding: 30px;}.wrapper img{height:150px; width:100px; display: block;margin-left: auto;margin-right: auto;width: 50%;}.footer{Margin-top: 10px; text-align: center; width: 100%;color: #999999;font-size:0.8rem;}.visit-dh-health{color: #2F8F9C;text-decoration: none;}</style></head><body> <div class=\"content\"> <div class=\"wrapper\"><b id=\"UserName\"></b> <p id=\"Contact\"></p> <p id=\"Email\"></p><p id=\"message\"></p></div><div class=\"footer\"> <p>Proshanti 3rd & 4th Floor, House: 257 <br>Road: 1, Block: B, Bashundhara R/A,Dhaka 1229.</p><p>Powered by <a class=\"visit-dh-health\" href=\"https://www.dh.health/ \">Dh.Health<a></p>.</div></div></body></html>",
                            CreatedBy = "SYSTEM",
                            CreatedOn = new DateTime(2020, 12, 31, 8, 15, 5, 838, DateTimeKind.Utc).AddTicks(1281),
                            IsDeleted = false,
                            TemplateName = "User Query To Admin",
                            TemplateType = 2
                        },
                        new
                        {
                            Id = 3,
                            Body = "<html><head><link href='https://fonts.googleapis.com/css?family=Roboto' rel='stylesheet'><style>body{font-family: 'Roboto';font-size: 1rem;background-color: #fff;}.content{Margin: 0 auto; max-width: 580px; padding: 10px;}.wrapper{width: 100%; border-radius: 3px;padding: 30px;}.wrapper img{height:150px; width:100px; display: block;margin-left: auto;margin-right: auto;width: 50%;}.footer{Margin-top: 10px; text-align: center; width: 100%;color: #999999;font-size:0.8rem;}.visit-dh-health{color: #2F8F9C;text-decoration: none;}</style></head><body> <div class=\"content\"> <div class=\"wrapper\"><b id=\"userName\"></b><p>Thank you for your application and interest in Digital Healthcare Solutions (DH) as your Employer of Choice.</p><br> <p>At this stage, your patience is appreciated while our Talent Acquisition Team reviews your application. If you are shortlisted for further steps, you will be contacted by one of our professionals regarding further steps in the selection process.</p><br><br><p>Best Regards,</p><p>Digital Healthcare Solutions (DH)</p></div></div></body></html>",
                            CreatedBy = "SYSTEM",
                            CreatedOn = new DateTime(2020, 12, 31, 8, 15, 5, 838, DateTimeKind.Utc).AddTicks(1281),
                            IsDeleted = false,
                            TemplateName = "Job Apply Confirmation",
                            TemplateType = 3
                        },
                        new
                        {
                            Id = 4,
                            Body = "<html><head><link href='https://fonts.googleapis.com/css?family=Roboto' rel='stylesheet'><style>body{font-family: 'Roboto';font-size: 1rem;background-color: #fff;}.content{Margin: 0 auto; max-width: 580px; padding: 10px;}.wrapper{width: 100%; border-radius: 3px;padding: 30px;}.wrapper img{height:150px; width:100px; display: block;margin-left: auto;margin-right: auto;width: 50%;}.footer{Margin-top: 10px; text-align: center; width: 100%;color: #999999;font-size:0.8rem;}.visit-dh-health{color: #2F8F9C;text-decoration: none;}</style></head><body> <div class=\"content\"> <div class=\"wrapper\"><b id=\"applicantName\"></b> <p id=\"applicantContact\"></p><p id=\"applicantEmail\"></p></div><div class=\"footer\"> <p>Proshanti 3rd & 4th Floor, House: 257 <br>Road: 1, Block: B, Bashundhara R/A,Dhaka 1229.</p><p>Powered by <a class=\"visit-dh-health\" href=\"https://www.dh.health/ \">Dh.Health<a></p>.</div></div></body></html>",
                            CreatedBy = "SYSTEM",
                            CreatedOn = new DateTime(2020, 12, 31, 8, 15, 5, 838, DateTimeKind.Utc).AddTicks(1281),
                            IsDeleted = false,
                            TemplateName = "Applied Job To Admin",
                            TemplateType = 4
                        },
                        new
                        {
                            Id = 5,
                            Body = "<html><head><link href='https://fonts.googleapis.com/css?family=Roboto' rel='stylesheet'><style>body{font-family: 'Roboto';font-size: 1rem;background-color: #fff;}.content{Margin: 0 auto; max-width: 580px; padding: 10px;}.wrapper{width: 100%; border-radius: 3px;padding: 30px;}.wrapper img{height:150px; width:100px; display: block;margin-left: auto;margin-right: auto;width: 50%;}.footer{Margin-top: 10px; text-align: center; width: 100%;color: #999999;font-size:0.8rem;}.visit-dh-health{color: #2F8F9C;text-decoration: none;}</style></head><body> <div class=\"content\"> <div class=\"wrapper\"><b>Dear User, </b> <p>Thank you for your Subscribe.</p><p id=\"userEmail\"></p><p>Dh Health Team</p><p>Visit our Website <a class=\"visit-dh-health\" href=\"https://www.dh.health/ \">Dh.Health<a></p>. </div><div class=\"footer\"> <p>Proshanti 3rd & 4th Floor, House: 257 <br>Road: 1, Block: B, Bashundhara R/A,Dhaka 1229.</p><p>Powered by <a class=\"visit-dh-health\" href=\"https://www.dh.health/ \">Dh.Health<a></p>.</div></div></body></html>",
                            CreatedBy = "SYSTEM",
                            CreatedOn = new DateTime(2020, 12, 31, 8, 15, 5, 838, DateTimeKind.Utc).AddTicks(1281),
                            IsDeleted = false,
                            TemplateName = "News Subscription",
                            TemplateType = 5
                        });
                });

            modelBuilder.Entity("Core.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Core.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Album")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BottomText")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Core.Entities.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Page");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ControllerName = "Home",
                            CreatedBy = "SYSTEM",
                            CreatedOn = new DateTime(2020, 12, 31, 8, 15, 5, 820, DateTimeKind.Utc).AddTicks(6551),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Home"
                        },
                        new
                        {
                            Id = 2,
                            ControllerName = "WhoWeAre",
                            CreatedBy = "SYSTEM",
                            CreatedOn = new DateTime(2020, 12, 31, 8, 15, 5, 820, DateTimeKind.Utc).AddTicks(6551),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Who We Are"
                        },
                        new
                        {
                            Id = 3,
                            ControllerName = "OurServices",
                            CreatedBy = "SYSTEM",
                            CreatedOn = new DateTime(2020, 12, 31, 8, 15, 5, 820, DateTimeKind.Utc).AddTicks(6551),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Our Services"
                        },
                        new
                        {
                            Id = 4,
                            ControllerName = "SustainableImpacts",
                            CreatedBy = "SYSTEM",
                            CreatedOn = new DateTime(2020, 12, 31, 8, 15, 5, 820, DateTimeKind.Utc).AddTicks(6551),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Sustainable Impacts"
                        },
                        new
                        {
                            Id = 5,
                            ControllerName = "PartnerWithUs",
                            CreatedBy = "SYSTEM",
                            CreatedOn = new DateTime(2020, 12, 31, 8, 15, 5, 820, DateTimeKind.Utc).AddTicks(6551),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Partner With Us"
                        },
                        new
                        {
                            Id = 6,
                            ControllerName = "OurBrands",
                            CreatedBy = "SYSTEM",
                            CreatedOn = new DateTime(2020, 12, 31, 8, 15, 5, 820, DateTimeKind.Utc).AddTicks(6551),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Our Brands"
                        },
                        new
                        {
                            Id = 7,
                            ControllerName = "Career",
                            CreatedBy = "SYSTEM",
                            CreatedOn = new DateTime(2020, 12, 31, 8, 15, 5, 820, DateTimeKind.Utc).AddTicks(6551),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Career"
                        },
                        new
                        {
                            Id = 8,
                            ControllerName = "News",
                            CreatedBy = "SYSTEM",
                            CreatedOn = new DateTime(2020, 12, 31, 8, 15, 5, 820, DateTimeKind.Utc).AddTicks(6551),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "News"
                        },
                        new
                        {
                            Id = 9,
                            ControllerName = "ContactUs",
                            CreatedBy = "SYSTEM",
                            CreatedOn = new DateTime(2020, 12, 31, 8, 15, 5, 820, DateTimeKind.Utc).AddTicks(6551),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Contact Us"
                        });
                });

            modelBuilder.Entity("Core.Entities.PageSections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("PageId", "SectionId")
                        .IsUnique();

                    b.ToTable("PageSections");
                });

            modelBuilder.Entity("Core.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomCss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentSectionId")
                        .HasColumnType("int");

                    b.Property<byte>("SectionOrder")
                        .HasColumnType("tinyint");

                    b.Property<int?>("SectionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TitleLarge")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("TitleLargeOnTop")
                        .HasColumnType("bit");

                    b.Property<string>("TitleSmall")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ImageId");

                    b.HasIndex("ParentSectionId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Core.Entities.ContactUs", b =>
                {
                    b.HasOne("Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Image", b =>
                {
                    b.HasOne("Core.Entities.Identity.ApplicationUser", "User")
                        .WithMany("Images")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.PageSections", b =>
                {
                    b.HasOne("Core.Entities.Page", "Page")
                        .WithMany("PageSections")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Section", "Section")
                        .WithMany("PageSections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Section", b =>
                {
                    b.HasOne("Core.Entities.Identity.ApplicationUser", "User")
                        .WithMany("Sections")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Image", "Image")
                        .WithMany("Sections")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.Section", "ParentSection")
                        .WithMany()
                        .HasForeignKey("ParentSectionId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
